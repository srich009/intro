STL list 

a doubly linked list with dummy head and tail nodes...


#include <list>
#include <iterator> // sometimes

list<type> myList;  // type can be int, char, double

list<type>::iterator it; // an iterator for a list of the type


lists use iterators, a type of encapsulated pointer

.begin() == iterator to the first node of the list

.end() == iterator to 1 past last node  (like null terminated char array)


***** when using iterators be careful
--------------------------------------------------------------
** ERASE

erases elements based by the position of an iterator

The erase function returns an iterator to the next item in the list, the one after the item you just erased

erase from the list container either a single element (position) or a range of elements ([first,last)).

iterator erase (iterator position);
iterator erase (iterator first, iterator last);

it = list1.erase(it); // points after where erase

it--; // now points to right before where the erase was

Iterators, pointers and references referring to elements removed by the function are invalidated.
All other iterators, pointers and references keep their validity.
The container is modified.
The elements removed are modified. Concurrently accessing or modifying other elements is safe, although iterating ranges that include the eraseded elements is not.

----------------------------------------------------------
** REMOVE
the remove function is void and will remove by value not position

void remove (const value_type& val);

list.remove(value);

Iterators, pointers and references referring to elements removed by the function are invalidated.
All other iterators, pointers and reference keep their validity.
The container is modified.
The elements removed are modified. Concurrently accessing or modifying other elements is safe, although iterating through the container is not.

//-------------------------

fill with a loop and push_back

OR

list<int> mylist = {1,2,3}; // c++11 style

//----------------------------


